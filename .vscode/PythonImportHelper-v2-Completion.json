[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "generate_unique_id",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def generate_unique_id():\n    global id\n    id += 1\n    return id \n@app.route('/', methods=['GET'])\ndef home():\n    user_name = os.environ.get('USER_NAME', 'usuário')\n    secret_value = os.environ.get('SECRET_VALUE', 'TsOjbyBmb2kgaW5mb3JtYWRv')\n    decoded_bytes = base64.b64decode(secret_value)\n    decoded_string = decoded_bytes.decode('utf-8')",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def home():\n    user_name = os.environ.get('USER_NAME', 'usuário')\n    secret_value = os.environ.get('SECRET_VALUE', 'TsOjbyBmb2kgaW5mb3JtYWRv')\n    decoded_bytes = base64.b64decode(secret_value)\n    decoded_string = decoded_bytes.decode('utf-8')\n    return jsonify({\"message\": f\"Olá {user_name}, essa é sua api de tarefas, exemplo de secrets em base64 é {secret_value} e decodificado é ({decoded_string})\"})\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    return jsonify({'tasks': tasks})\n@app.route('/tasks', methods=['POST'])",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def get_tasks():\n    return jsonify({'tasks': tasks})\n@app.route('/tasks', methods=['POST'])\ndef add_task():\n    data = request.get_json()\n    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    id_task =  generate_unique_id()\n    task = {\n        'id': id_task,\n        'description': data.get('description'),",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def add_task():\n    data = request.get_json()\n    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    id_task =  generate_unique_id()\n    task = {\n        'id': id_task,\n        'description': data.get('description'),\n        'status': 'pending',\n        'created_at': current_time,\n        'updated_at': None,",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "get_task",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def get_task(task_id):\n    if task_id in tasks:\n        return jsonify({'task': tasks[task_id]})\n    else:\n        return jsonify({'error': 'Tarefa não existe'}), 404\n@app.route('/tasks/<int:task_id>', methods=['PUT'])\ndef update_task(task_id):\n    if task_id in tasks:\n        data = request.get_json()\n        data['id'] = tasks[task_id]['id']",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def update_task(task_id):\n    if task_id in tasks:\n        data = request.get_json()\n        data['id'] = tasks[task_id]['id']\n        data['created_at'] = tasks[task_id]['created_at']\n        tasks[task_id]['description'] = data.get('description')\n        tasks[task_id]['updated_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        return jsonify({'message': 'Tarefa atualizada com sucesso'})\n    else:\n        return jsonify({'error': 'Tarefa não existe'}), 404",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "def delete_task(task_id):\n    if task_id in tasks:\n        del tasks[task_id]\n        return jsonify({'message': 'Tarefa apagada com sucesso'})\n    else:\n        return jsonify({'error': 'Tarefa não existe'}), 404\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "app = Flask(__name__)\ntasks = {}\nid = 0\ndef generate_unique_id():\n    global id\n    id += 1\n    return id \n@app.route('/', methods=['GET'])\ndef home():\n    user_name = os.environ.get('USER_NAME', 'usuário')",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "tasks = {}\nid = 0\ndef generate_unique_id():\n    global id\n    id += 1\n    return id \n@app.route('/', methods=['GET'])\ndef home():\n    user_name = os.environ.get('USER_NAME', 'usuário')\n    secret_value = os.environ.get('SECRET_VALUE', 'TsOjbyBmb2kgaW5mb3JtYWRv')",
        "detail": "todo",
        "documentation": {}
    },
    {
        "label": "id",
        "kind": 5,
        "importPath": "todo",
        "description": "todo",
        "peekOfCode": "id = 0\ndef generate_unique_id():\n    global id\n    id += 1\n    return id \n@app.route('/', methods=['GET'])\ndef home():\n    user_name = os.environ.get('USER_NAME', 'usuário')\n    secret_value = os.environ.get('SECRET_VALUE', 'TsOjbyBmb2kgaW5mb3JtYWRv')\n    decoded_bytes = base64.b64decode(secret_value)",
        "detail": "todo",
        "documentation": {}
    }
]